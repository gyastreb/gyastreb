package com.opencbs.dfa.ui

import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import com.opencbs.dfa.R
import com.opencbs.dfa.ui.extensions.showErrorMessage
import com.yandex.mapkit.MapKitFactory
import com.yandex.mapkit.geometry.Point
import com.yandex.mapkit.map.*
import com.yandex.mapkit.map.Map
import com.yandex.mapkit.mapview.MapView
import com.yandex.mapkit.search.*
import com.yandex.runtime.Error
import com.yandex.runtime.image.ImageProvider
import com.yandex.runtime.network.NetworkError
import com.yandex.runtime.network.RemoteError


class MapActivity : AppCompatActivity(), InputListener, Session.SearchListener {
    private val CIRCLE_CENTER = Point(42.865312, 74.562926)
    private lateinit var mapview: MapView
    private lateinit var searchManager: SearchManager
    private lateinit var searchSession: Session
    private lateinit var searchOptions: SearchOptions
    private var address: String? = null


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        MapKitFactory.setApiKey(getString(R.string.yandex_access_token));
        MapKitFactory.initialize(this)
        SearchFactory.initialize(this)
        searchManager = SearchFactory.getInstance().createSearchManager(SearchManagerType.ONLINE)
        searchOptions = SearchOptions()
        searchOptions.searchTypes = SearchType.GEO.value
        setContentView(R.layout.activity_map)
        mapview = findViewById<View>(R.id.mapview) as MapView
        val map =  mapview.getMap()
        map.move(CameraPosition(CIRCLE_CENTER, 11.0f, 0.0f, 0.0f))
        map.addInputListener(this)
        val addressFromField = intent.getStringExtra("address")
        if(!addressFromField.isNullOrEmpty()) {
            title = addressFromField
            submitQueryByName(addressFromField)
        }
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.map_actions, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            android.R.id.home -> onBackPressed()
            R.id.map_submit -> Unit
        }
        return super.onOptionsItemSelected(item)
    }

    override fun onSearchResponse(response: Response) {
        val childObjects = response.collection.children.firstOrNull()?.obj
        val result = childObjects?.metadataContainer?.getItem(ToponymObjectMetadata::class.java)
        val resultLocation = childObjects?.geometry?.firstOrNull()?.point
        if (resultLocation != null) {
            addPlacemarker(resultLocation)
        }
    }

    override fun onSearchError(error: Error) {
        var errorMessage = getString(R.string.unknown_error_message)
        if (error is RemoteError) {
            errorMessage = getString(R.string.remote_error_message)
        } else if (error is NetworkError) {
            errorMessage = getString(R.string.network_error_message)
        }
        errorMessage.showErrorMessage(mapview.rootView)
    }


    override fun onMapTap(map: Map, point: Point) {
        submitQueryByPoint(map.cameraPosition.zoom, point)
    }

    override fun onMapLongTap(map: Map, point: Point) = Unit

    override fun onStop() {
        super.onStop()
        mapview.onStop()
        MapKitFactory.getInstance().onStop()
    }

    override fun onStart() {
        super.onStart()
        mapview.onStart()
        MapKitFactory.getInstance().onStart()
    }

    private fun submitQueryByName(query: String) {
        searchSession = searchManager.submit(
            query,
            VisibleRegionUtils.toPolygon(mapview.map.visibleRegion),
            SearchOptions(),
            this
        )
    }

    private fun submitQueryByPoint(zoom: Float, point: Point) {
        searchSession = searchManager.submit(
            Point(55.734, 37.588),
            Math.round(zoom),
            searchOptions,
            this
        )
    }

    private fun addPlacemarker(point: Point) {
        val mapObjects = mapview.map.mapObjects
        mapObjects.clear()
        mapObjects.addPlacemark(point, ImageProvider.fromResource(this, R.drawable.search_result))
    }
}
